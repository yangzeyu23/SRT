classdef corePhaseToSLMLayer < nnet.layer.Layer
    
    properties
        % (Optional) Layer properties.
        
        % Layer properties go here.
        CoreCenter
        SLMsize
        Weights
    end
   
    methods
        function layer = corePhaseToSLMLayer(coreCenter,slmSize,weights,name)
            % (Optional) Create a myLayer.
            % This function must have the same name as the class.

            % Set layer name.
            layer.Name = name;
            
            % Set layer description.
            layer.Description = "core phase map to SLM";
            
            % Set parameters.
            layer.CoreCenter = coreCenter;
            layer.SLMsize = slmSize;
            layer.Weights = weights;
            
        end
        
        function Z = predict(layer, X)
            % Forward input data through the layer at prediction time and
            % output the result.
            %
            % Inputs:
            %         layer       - Layer to forward propagate through
            %         X1, ..., Xn - Input data
            % Outputs:
            %         Z1, ..., Zm - Outputs of layer forward function
            
            % Layer forward function for prediction goes here.
            X = permute(X,[3,2,1,4]);
            [~,~,C,N] = size(X);
            slmSize = layer.SLMsize;
            weights = layer.Weights;
            num = prod(slmSize);
            coreCenter = layer.CoreCenter;
            coreCenter = coreCenter.*ones([size(coreCenter),C,N]);
            
            increment = reshape(permute((0:num:(C*N-1)*num),[1,3,2]),[1,1,C,N]);           
            coreCenter = coreCenter + ones(size(coreCenter)).*increment;
            
            Z = zeros([slmSize,C,N],'like',X);
            Z(coreCenter) = X;
%             Z = X;
            Z = dlconv(Z,weights,0,'Padding','same','DataFormat','SSCB');
            
        end
                
    end
end